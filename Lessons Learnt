TL;DR:
1. await Promise.all( Array.map() );
2. dynamic variable names using eval and template literals
3. object-fit doesn't work with % but works with px, em/rem, vh/vm
4. multiple background-images using JavaScript + CSS Variables
5. clip-path forces the pseudo-elements to be on top of the parent element
6. position: absolute + transform: translate() to center an element itself
7. debounce and throttle, and the core concept behind them‚Äîclosure
8. function vs function()

I felt genuine surprise from what I've learned from this project!
1.  await Promise.all( Array.map() );
    I know that I will be using fetch and async/await, dealing with promises and array functions,
    but using async/await in tandem with Promise.all() and Array.map is simply AMAZING! Just like magic! ü§©
    Just to clarify, I'm already familiar with all their usage before this project.
    I always thought the for-of loop implemented in ES6 as the "cool kid" created to replace forEach loop to reduce callback usage,
    but essentially has the same function and serve the same purpose, BUT BOY WAS I WRONG! ü§£
    Apparently, async/await in for-of loop and forEach loop behaves differently!
    Based on what I've done in this project, using async/await on forEach loop like that:
    `
    (async () => {
      Array.forEach( async element => {
        /*
          code block with some await statements (Part A)
        */
      });
      // Code after forEach loop (Part B)
    })();            <-------------------------- wrapping the function with parentheses followed by parentheses causes the function to run once.
    // Code after function is run (Part C)
    `
    causes Part B and Part C to run before Part A.
    In other words, the code after forEach loop and the function itself DOES NOT WAIT for the code block inside the forEach loop,
    which isn't preferable in my case as I needed Part B and C to process the results I got from Part A.
    I then tried:
    `
    (async () => {
      Array.forEach( async element => {
        /*
          code block with some await statements (Part A)
        */
      });
      // Code after forEach loop (Part B)
      return a promise
    })()
    .then( res => something (Part C))
    `
    but the then statement changed nothing as Part B and C still run before Part A.
    
    I changed my function to:
    `
    (async () => {
      for await (let element of Array) {
        /*
          code block with some await statements (Part A)
        */
      }
      // Code after for-of loop (Part B)
    })();
    // Code after function is run (Part C)
    `
    and this time, it works as expected! (well... sort of but not really... but better than the last one)
    Everything inside Part A is run first, then processed by codes in Part B, then by codes in Part C. (the bright side)
    However, the await statements in Part A was running sequentially, which kind of kills the purpose of "await".
    
    After researching on StackOverflow, I reached this page: https://stackoverflow.com/questions/37576685/using-async-await-with-a-foreach-loop
    and I implemented:
    `
    (async () => {
      await Promise.all(Array.map(element => {
        /*
          code block with some await statements (Part A)
        */
      }));
      // Code after array map function (Part B)
    })();
    // Code after function is run (Part C)
    `
    THIS IS AMAZING! Every promise in Part A is processed at the same time! Even better,
    The program will WAIT for ALL the promises in Part A to be resolved first before proceeding to Part B and then Part C!
    I actually wrapped Part A with console.time() and console.timeEnd() to compare their efficiency.
    for-of loop takes 107.754 seconds but Promise.all(Array.map()) takes ONLY 3.484 seconds, saving 96.767% of the time!
    The time fluctuates a little, and it is affected by my internet speed as well but yeah, THIS IS AMAZING! ü§©
    
2.  dynamic variable names using eval and template literals
    I know that it is not preferable and rarely used, but I have my quirks and I enjoy exploring what I'm not familiar with,
    so I implemented dynamic variable names üòçüòù
    With a prior understanding to template literals, after learning how the function eval() works, it's actually really simple to implement.
    For people interested, these helped me in understanding
    Template Literals: (I actually forgot where I learned it first but this guide is very good too!) 
                       https://developers.google.com/web/updates/2015/01/ES6-Template-Strings
    Dynamic variable names: https://www.geeksforgeeks.org/how-to-use-dynamic-variable-names-in-javascript/

3.  object-fit doesn't work with % but works with px, em/rem, vh/vm
    `object-fit` is a nice CSS property that allows you to choose how to present an image with a larger size relative to its container.
    `object-fit: contain` would resize the larger image while maintaining its aspect ratio, 
                          until it is small enough for the container to `contain` the WHOLE image
    `object-fit: cover` would make the larger image `cover`s the container using its center (both horizontally and vertically)

    I like to visualize the differences by imagining putting a piece of paper (larger surface area) on a box (smaller surface area).
    To ensure that the paper is balance and not fall off, I'd have to stack the paper and the box in a way that align their centers of gravity,
    so that the 2 pairs of opposite sides have the same extra length of paper.
    That would be `object-fit: cover`.
    Achieving `object-fit: contain` would mean to resize the paper (I know it's physically impossible but let's just imagine it :P)
    until the whole paper can be contained by the box (or the container).
    Doing so will cause the paper to span across the opposite sides of the box in an axis (horizontal / vertical depending on the aspect ratio),
    and leaving some hollow, or rather, NOT "cover"ed areas on the two sides of another axis.
    For better understanding, it's better to visit https://www.w3schools.com/css/css3_object-fit.asp and play around with `outline: 1px solid red`;

    I wrote all that to reinforce my memory sorry for the rambling :P
    Back to the main point, apparently this `object-fit` property doesn't work when the height/width of the image is set using `%`.
    It works when I tried length units of vw, vh, em, rem, and px.

4.  multiple background-images using JavaScript + CSS Variables
    So I'm doing this custom searchable drop-down list, and I wanted every option to have an icon.
    Not surprisingly, putting an <img> element inside an <option> element doesn't work, so I use CSS background-image property instead.
    Adding a line of JavaScript for every option upon generation like this:
      option.style.backgroundImage = `url("path/${ÂºèÁ•û.ÁºñÂè∑}.png")`;
    does the job. However the option is looking quite boring and mundane, so I was thinking to add a linear-gradient and possibly a sort of
    glowing or pulsating radial-gradient to the options upon selected by cursor hover / arrow keys.
    Without hesitation, I quickly coded what's in my mind:
      option.target {
        background-image: linear-gradient(...), radial-gradient(...);
        ...
      }
    
    Just as I joyously look for a nice output, to my surprise, the gradients were there, but the icon is gone.
    It is immediately clear to me that the background-image property of the targetted option superceded that of non-targetted option.
    For the icon and the gradients to coexist, I need to write a background-image property consisting all 3 of them.
    I immediately thought of setting a data-icon-URL attribute for every option upon generation, then retrieve the URL using the attr() CSS function
    in background-image property, however the url() function within the return value of attr() function is not parsed by CSS...
    Apparently, according to MDN, there have been efforts to add types and fallback for the attr() function, but as of the time
    this self-reflection is written, it is not supported in any browser yet. See: https://developer.mozilla.org/en-US/docs/Web/CSS/attr
    Then, I thought of storing ONLY the URL in the data-icon-URL attribute, then call it in background-image using the attr() function,
    and wrap that attr() function inside a url() function that looks like this: background-image: url(attr(data-icon-URL));
    However, CSS doesn't do that, as the url() function only accepts a string as argument, and the attr() function inside it is not evaluated.
    
    Just when I was flustered about this, CSS Variables came to the rescue. You know, I've been using CSS variables since the first week of studying CSS
    but it wasn't my first and immediate approach, and I'm kinda ashamed about that ü§£
    So once that idea clicked in my head, all I had to do was:
      option.style.setProperty("--icon-URL", `url("path/${ÂºèÁ•û.ÁºñÂè∑}.png")`);                           in JavaScript, and
      background-image: var(--icon-URL), linear-gradient(...), radial-gradient(...);                   in CSS
    After setting up background-size, and background-position with their values separated using commas, everything works as I planned!
    There, all happy! üòÑ

5.  clip-path forces the pseudo-elements to be on top of the parent element
    In other words, clip-path doesn't interact well with the z-index of pseudo-elements.
    Normally when you have an element with both ::before and ::after pseudo-elements, you may stack them however you want using z-index.
    In my case, I wanted to make a hexagonal container with 3 layers of different colors to contain some icons.
    I was thinking that maybe I'll have the ::before pseudo-element with z-index: 1 containing the said icon stacked on top of the element itself,
    which is stacked on top of the ::after pseudo-element with z-index: -1.
    
    Linguistically, it makes perfect sense to me because the one ::before is stacked at the top, the one ::after is placed at the back.
    Structurally, I see no problem at all and so I was quick to code it out.
    This is the worst one for me because things went wrong and I've ABSOLUTELY NO IDEA what went wrong.
    I was tinkering this and that, desperately trying to find out what was wrong, and after this massive process of elimination,
    I finally casted my suspicion on the CSS property `clip-path`.
    
    The CSS property clip-path is absolutely amazing. It makes displaying an element in custom shape so unbelievably easy, plus it can be animated!
    I've never doubted it in the first place because how does shape has anything to do with stacking?
    Oh what a hard price I've paid, for such innocent presumption...
    Yep, just as I removed that property from codepen.io which I was using for testing, the z-index works again, and in fact,
    every other property works just as expected. I've no idea why is it like that, but upon more research on StackOverflow,
    I realize that this is a common issue, and the go-to solution is just putting the element at the back with its pseudo-elements on top of it.
    It is however, still possible to stack the pseudo-elements in the order that we want using z-index;

6.  position: absolute + transform: translate() to center an element itself
    I got really used to the easy way of setting 
      element.parent {
        display: flex;
        align-items: center;
        justify-content: center;
      }
    in the parent element to center its child / children.
    But I've encountered some occassions where it feels inappropriate to do so when it's only one child element that needs to be centered / positioned.
    The solution is simple, and I'm familiar with it as I've seen it quite a number of times already in video tutorials I've watched in YouTube.
    What makes me reflect about it is its elegance. I don't know, it's just beatiful to me, and I can't wait to reinforce my memory about it.
    
    The solution is a combination of:
      element {
        position: absolute;
        top/bottom/left/right: +- 50%;
        transform: translateX / translateY ( +-50% );
      }
    Though the values used are 50%, they mean differently in transform and the 4 directional properties(? let's just call them that).
    Taking the example of
      element {
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
      },
    left: 50% computes a distance, d, equals to 50% of the width of the PARENT element, and places the element d px right to the parent's left border;
    transform: translateX(-50%) on the other hand, computes a distance, x, equals to 50% of the width of the ELEMENT ITSELF,
    and translates the element x px to the left (because negative) of where it was placed in the `left: 50%` just now.
    
    As such, it is now d-x pixels from the parent's left border.
    Now, note that d is 50% of the width of the parent element, so the parent's width is 2d,
    while x is 50% of the width of the element itself, so the element itself has a width of 2x.
    Illustration:
                    d-x pixels             2x pixels                  ?
                  |------------|-------------------------------|------------|
    left border (parent)                  the element                 right border (parent)
    The distance between the element and the right border of its parent
    = 2d - (d-x) - 2x pixel
    = 2d - d + x - 2x
    = d-x pixels
    = Guess what? The distance between the element and the left border of its parent!
    
    We just centered an element horizontally in its parent element!
    It works the same for elements larger than its parent.
    The same effect can be achieved with
      element {
        position: absolute;
        right: -50%;
        transform: translateX(50%);
      },
    and I'll let you work it out why if you are fascinated as well üòâ.
    Vertically, these work.
      element {                                   element {
        position: absolute;                         position: absolute;
        top: 50%;                         or        bottom: 50%;
        transform: translateY(-50%);                transform: translateY(-50%);
      }                                           }
      
    To center an element both horizontally and vertically, any combination works!
    Just note that you'll have to use `translate()` instead with 2 arguments: horizontal translation then its vertical counterpart, like:
      element {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
      }

7.  debounce and throttle, and the core concept behind them‚Äîclosure
    In brief, both debounce and throttle are terms that come from electronics, with the purpose of limiting user's input.
    When applied to programming, debouncing a function supresses continuous activity within a time frame, in other words
    forcing the function to wait for a specific time frame before it is allowed to run again.
    Throttling a function on the other hand, fires the function at specific interval if the function is triggered continuously.
    Perhaps my word choice is bad and I did poorly explaining them, but that's how I understood them as I'm writing this reflection.
    Don't worry, we'll understand more about them with examples.
    
    At a younger age, I've never understood or comprehended the purpose of limiting activities, (yep I was stoopid but come on,
    I didn't have adults explaining that to me...) until I need to write an eventlistener for drag.
    Holy smokes! The function just fires off like there's no tomorrow and it makes my page so laggy! üòØ
    I tried to figure out some algorithm that uses mouse movement / distance as a criterion to fire a function,
    but apparently mousemove event is disabled during a drag event.
    I was stumbling on several StackOverflow posts until I came across a comment with 1 (YES ONLY 1) upvote recommending the OP
    to try debouncing / throttling the function, which turns out to be the right suggestion!
    (Well that comment only provides a link to MDN but not the code solution so I guess not much people were bothered by that)
    
    So during a drag event, the function is fired continuously, and if the function doesn't get enough time to do what it's meant to do
    before it's fired again, the page becomes laggy. This is where debouncing and throttling come in to save the day.
    Using drag as an example, without debounce / throttle, my function fires of continuously as long as I'm dragging an element.
    Let's say I set a delay of 500ms, with simple debounce, the function doesn't fire at all, and it'll only fire after 
    I stop dragging the element for 500ms, and it only fire once. With a slightly modified debounce, we can make the function to
    fire once immediately when I start dragging an element, and never again until I drag it the next time, after stopping for 500ms.
    
    Applying simple throttle to a function on the other hand, would cause the function to fire once immediately when I start
    dragging an element, then fire once every 500ms as long as I'm dragging the element. It's important to note that if I stop dragging
    the element within a 500ms interval from the last time the function fires, the function would NOT fire when I stop dragging the element,
    but just like debouncing, we may modify the throttle function a little to fire the function once more when the continuous event ended.
    
    Now, I have to apologize if the usage of "simple" and "modified" debounce or throttle functions throws you off a little for you have
    learned them the "modified" way or gained a full understanding of the 2 functions already, but this is objectively a self-reflection,
    and that's how I really have learned debounce and throttle: a simple one, then an improved one. But before we get into the code,
    it is important to understand JavaScript Closure. In my humble opinion, w3schools has really nailed explaning the concepts of Closure
    to a beginner like me and the example used was perfect. For interested readers: https://www.w3schools.com/js/js_function_closures.asp
    For more advanced examples and questions, I would recommend https://javascript.info/closure
    The next paragraph really is just my self-reflection on Closure so you may skip it as you please. üòâ
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
